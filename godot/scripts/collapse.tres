[gd_resource type="Shader" format=3 uid="uid://dgh1hihlb3svg"]

[resource]
code = "// NOTE: Shader automatically converted from Godot Engine 4.3.stable's StandardMaterial3D.

shader_type spatial;
render_mode depth_draw_always, diffuse_burley, blend_mix;

uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color, filter_linear_mipmap, repeat_enable;
uniform float point_size : hint_range(0.1, 128.0, 0.1);

uniform float roughness : hint_range(0.0, 1.0);
uniform sampler2D texture_metallic : hint_default_white, filter_linear_mipmap, repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r, filter_linear_mipmap, repeat_enable;

uniform float specular : hint_range(0.0, 1.0, 0.01);
uniform float metallic : hint_range(0.0, 1.0, 0.01);

uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

uniform sampler2D distortionTexture;

uniform float progress: hint_range(0.0, 1.0, 0.1) = 0.5;

void vertex() {
    vec3 original = VERTEX.xyz;
    float distortion = texture(distortionTexture, UV).r;

    // 1. Shrink the cube linearly with progress
    vec3 scaled = original * (1.0 - progress);

    // 2. Calculate distortion that intensifies as progress increases
    vec3 displacement = vec3(
        (distortion * 2.0 - 1.0) * progress, // Convert to -1..1 range
        (texture(distortionTexture, UV + vec2(0.3, 0.3)).r * 2.0 - 1.0) * progress, // Offset sample for Y
        (texture(distortionTexture, UV + vec2(0.7, 0.7)).r * 2.0 - 1.0) * progress  // Offset sample for Z
    );

    // 3. Apply final position (automatically clamped by original bounds)
    VERTEX.xyz = scaled + displacement;
	VERTEX.xyz *= 1.0 - progress;
}

void fragment() {
	vec2 base_uv = UV;

	vec4 albedo_tex = texture(texture_albedo, base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;

	float metallic_tex = dot(texture(texture_metallic, base_uv), metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	SPECULAR = specular;

	vec4 roughness_texture_channel = vec4(1.0, 0.0, 0.0, 0.0);
	float roughness_tex = dot(texture(texture_roughness, base_uv), roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	ALPHA = albedo.a;
}
"
